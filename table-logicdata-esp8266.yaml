substitutions:
  name: table
  desk_height_name: "Desk Height"
  target_desk_height_name: "Target Desk Height"
  standing_desk_variant: "logicdata"
  # Standing Desk Component Config
  standing_desk_uart_rx_pin: D2
  standing_desk_min_height: "79"
  standing_desk_max_height: "121"
  bit1_pin: D5
  bit2_pin: D6
  bit3_pin: D7
  bit4_pin: D8
  # Runtime Config Defaults
  default_height_units: "cm" # Must be "in" or "cm"
esphome:
  name: $name
  friendly_name: $name
  name_add_mac_suffix: true
  project:
    name: esphome.table-logicdata
    version: "1.0"

esp8266:
  board: d1_mini

api:

ota:

logger:

improv_serial:

wifi:
  ap:
    ssid: "ESP Table"

captive_portal:

dashboard_import:
  package_import_url: github://majklovec/esphome-nodes/table-esp8266.yaml@main
  import_full_config: false

esp32_improv:
  authorizer: none

web_server:
  port: 80

external_components:
  - source:
      type: local
      path: ./components
    components: [standing_desk_height]

uart:
  # Direction: Handset -> Control Box
  - id: handset_tx
    baud_rate: 1000
    rx_pin:
      number: ${standing_desk_uart_rx_pin}
      inverted: true
    parity: EVEN

    # debug: &uart_debug
    #   direction: RX
    #   dummy_receiver: true
    #   after:
    #     timeout: 50ms
    #   sequence:
    #     - lambda: UARTDebug::log_hex(uart::UART_DIRECTION_TX, bytes, ':');

sensor:
  - platform: standing_desk_height
    id: desk_height
    name: ${desk_height_name}
    unit_of_measurement: ${default_height_units}
    variant: ${standing_desk_variant}

number:
  - platform: template
    id: target_desk_height
    name: ${target_desk_height_name}
    unit_of_measurement: ${default_height_units}
    restore_value: true
    optimistic: true
    min_value: ${standing_desk_min_height}
    max_value: ${standing_desk_max_height}
    step: 0.1
    set_action:
      then:
        - if:
            condition:
              lambda: "return id(desk_height)->get_last_read() > x;"
            then:
              - switch.turn_on: switch_down
              - wait_until:
                  condition:
                    lambda: "return id(desk_height)->get_last_read() <= x + 0.4;"
                  timeout: 20s
              - switch.turn_off: switch_down
            else:
              - switch.turn_on: switch_up
              - wait_until:
                  condition:
                    lambda: "return id(desk_height)->get_last_read() >= x - 0.4;"
                  timeout: 20s
              - switch.turn_off: switch_up

output:
  # HS1
  - platform: gpio
    id: bit1
    pin: ${bit1_pin}

  # HS2
  - platform: gpio
    id: bit2
    pin: ${bit2_pin}

  # HS3
  - platform: gpio
    id: bit3
    pin: ${bit3_pin}

  # HS4
  - platform: gpio
    id: bit4
    pin: ${bit4_pin}

# Logical Connection of Action and Bits
switch:
  - platform: output
    name: "up"
    id: "switch_up"
    internal: True
    output: bit1
    on_turn_on:
      then:
        - output.turn_on: bit3
    on_turn_off:
      then:
        - output.turn_off: bit3

  - platform: output
    name: "down"
    id: "switch_down"
    internal: True
    output: bit1
    on_turn_on:
      then:
        - output.turn_on: bit4
    on_turn_off:
      then:
        - output.turn_off: bit4

  - platform: output
    name: "move position1"
    id: "move_position1"
    output: bit3
    # on_turn_on:
    #   then:
    #     - output.turn_on: bit4
    # on_turn_off:
    #   then:
    #     - output.turn_off: bit4

  - platform: output
    name: "move_position2"
    id: "move_position2"
    output: bit4
    # on_turn_on:
    #   then:
    #     - output.turn_on: bit4
    # on_turn_off:
    #   then:
    #     - output.turn_off: bit4

  - platform: output
    name: "move_position3"
    id: "move_position3"
    output: bit2
    on_turn_on:
      then:
        - output.turn_on: bit4
    on_turn_off:
      then:
        - output.turn_off: bit4

  - platform: output
    name: "move_position4"
    id: "move_position4"
    output: bit2
    on_turn_on:
      then:
        - output.turn_on: bit3
    on_turn_off:
      then:
        - output.turn_off: bit3

  - platform: output
    name: "save position"
    id: "save_position"
    output: bit1
    on_turn_on:
      then:
        - output.turn_on: bit2
    on_turn_off:
      then:
        - output.turn_off: bit2

button:
  - platform: restart
    name: "Restart"

cover:
  - platform: template
    name: Desk
    device_class: blind
    icon: mdi:desk
    lambda: |-
      if (id(desk_height).state >= ${standing_desk_max_height}) {
        return COVER_OPEN;
      } else {
        return COVER_CLOSED;
      }
    open_action:
      - lambda: |-
          auto call = id(target_desk_height).make_call();
          call.set_value(${standing_desk_max_height});
          call.perform();
    close_action:
      - lambda: |-
          auto call = id(target_desk_height).make_call();
          call.set_value(${standing_desk_min_height});
          call.perform();
    stop_action:
      - switch.turn_off: switch_down
      - switch.turn_off: switch_up
    # tilt_lambda: |-
    #     return (id(desk_height).state - ${standing_desk_min_height}) / (${standing_desk_max_height} - ${standing_desk_min_height});
    # tilt_action:
    #   - lambda: |-
    #       auto call = id(target_desk_height).make_call();
    #       call.set_value(tilt * (${standing_desk_max_height} - ${standing_desk_min_height})) + ${standing_desk_min_height}));
    #       call.perform();

light:
  - platform: status_led
    name: sys_status
    pin:
      number: D4
      inverted: True
    internal: True
    restore_mode: ALWAYS_OFF
